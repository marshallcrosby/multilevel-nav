{"version":3,"names":[],"mappings":"","sources":["multilevel-nav-slide-over.js"],"sourcesContent":["/*!\n  * Multilevel nav slide over functionality v1\n  */\n  \n(function ($) {\n    'use strict';\n\n    // Slide over keyboard trap\n    var slideOverKeyboardTrap = function(el) {\n\n        // Tabbable elements\n        var lastIsMln = el.find('.mln__child__list')\n            .first()\n            .find(' > .mln__has-child:last-child > .mln__child-controls')\n            .first()\n            .find('> .mln__toggle-btn, > .mln__toggle-link');\n        \n        var tabbable = el.find(\n            'a[href],' +\n            'area[href],' +\n            'input:not([disabled]),' +\n            'select:not([disabled]),' +\n            'textarea:not([disabled]),' +\n            'button:not([disabled]),' +\n            'iframe,' +\n            'object,' +\n            'embed,' +\n            '[tabindex=\"0\"],' +\n            '[contenteditable]'\n        );\n\n        var firstTabbable = tabbable.first();\n        var lastTabbable = (lastIsMln.length) ? lastIsMln  : tabbable.last();\n        \n        // Set focus on first input\n        firstTabbable.focus();\n\n        // Redirect last tab to first input\n        lastTabbable.on('keydown', function(e) {\n            if (e.which === 9 && !e.shiftKey && $('body').hasClass('js-off-canvas-showing')) {\n                e.preventDefault();\n                firstTabbable.focus();\n            }\n        });\n\n        // Redirect first shift+tab to last input\n        firstTabbable.on('keydown', function(e) {\n            if (e.which === 9 && e.shiftKey && $('body').hasClass('js-off-canvas-showing')) {\n                e.preventDefault();\n                lastTabbable.focus();\n            }\n        });\n    };\n          \n    $.fn.multilevelSlideOver = function (options) {\n        $(this).each(function () {\n            var $slideOverNav = $(this);\n            var settings;\n            var mlnDataBreakpoint = $slideOverNav.attr('data-mln-breakpoint');\n            \n            // Setting defaults\n            settings = $.extend({\n                'slideTitles': true,\n                'slideTitleLink': false,\n                'backButtonSymbol': '&lsaquo;',\n                'offCanvasCloseAllMenus': false\n            }, options);\n                        \n            function closeAllChildren() {\n                if ($slideOverNav.is('.mln--navbar-slide-over')) {\n                    $slideOverNav\n                        .find('[aria-hidden=\"false\"]')\n                        .attr('aria-hidden', true)\n                        .removeClass('mln--height-auto mln__child--overflow-visible')\n                        .end()\n                        .find('.mln__visible-menu')\n                        .removeClass('mln__visible-menu')\n                        .end()\n                        .find('.mln__list')\n                        .addClass('mln__visible-menu')   \n                        .end()\n                        .find('[aria-expanded=\"true\"]')\n                        .attr('aria-expanded', false)\n                        .closest('.mln__has-child--showing')\n                        .removeClass('mln__has-child--showing')\n                        .closest('.mln--navbar-slide-over')\n                        .css({\n                            'min-height': ''\n                        });      \n                }\n            }\n            \n            // Set height on certain elements to make the outer nav height the same\n            // height as the current viewable slide\n            function setDynamicHeight() {\n\n                // Reset inline css\n                $slideOverNav.find('.mln__child__collapse').css('min-height', '');\n\n                if (parentCollapse) {\n                    parentCollapse.css('min-height', '');\n                }\n\n                // Cache correct elements and get their proper height\n                var latestChildShowing = $slideOverNav.find('.mln__has-child.mln__has-child--showing')\n                    .last()\n                    .find(' > .mln__child__collapse')\n                    .first()\n                    .find('> .mln__child__collapse__helper');\n                \n                var parentCollapse = $slideOverNav.find('.mln__has-child.mln__has-child--showing')\n                    .last()\n                    .closest('.mln__child__collapse');\n                \n                var getHeightFromThis = (latestChildShowing.length) ? latestChildShowing : $slideOverNav.find('.mln__list');\n                \n                // Correct height wether it's a child or the top level list\n                var dynamicHeight = getHeightFromThis.outerHeight();\n                \n                // Set nav elements height to the same as the current viewable slide\n                $slideOverNav.css('min-height', dynamicHeight);\n\n                // Set the height of the current slides parent collapse\n                // to prevent clunky inner scrollbars\n                parentCollapse.css('min-height', dynamicHeight);\n            }\n            \n            // Help mln act like overlay nav for mobile devices\n            $slideOverNav.find('.mln__has-child').each(function() {\n                var $navEl = $(this);\n                var currentMenuId = $navEl.find('.mln__child__collapse').first().attr('id');\n                var nextCollapseHelper = $navEl.find('.mln__child__collapse__helper').first();\n                var menuSectionLink = $navEl.find(' > .mln__child-controls > a');\n                var menuSectionLabel = menuSectionLink.html();\n                var backButtonSymbol = (settings.backButtonSymbol) ? '<span aria-hidden=\"true\">' + settings.backButtonSymbol + '</span> ' : '';\n                var backButtonText = (menuSectionLink.attr('data-mln-not-linkable')) ? backButtonSymbol + menuSectionLink.text() : backButtonSymbol + 'Back';\n\n                $('<div>')\n                    .addClass('mln__slide-over-controls')\n                    .prependTo(nextCollapseHelper);\n                    \n                $('<button>')\n                    .addClass('mln__back-btn')\n                    .attr('type', 'button')\n                    .attr('aria-controls', currentMenuId)\n                    .html(backButtonText)\n                    .prependTo($navEl.find('.mln__slide-over-controls'));\n                    \n                // Build slide title no link\n                if (settings.slideTitles && !settings.slideTitleLink) {\n                    $('<span>')\n                        .addClass('mln__slide-over-title')\n                        .html(menuSectionLabel)\n                        .appendTo($navEl.find('.mln__slide-over-controls'));\n                }\n                \n                // Build slide title with link\n                if (settings.slideTitles && settings.slideTitleLink) {\n                    menuSectionLink\n                        .clone()\n                        .addClass('mln__slide-over-title')\n                        .removeClass('mln__toggle-link')\n                        .removeAttr('role aria-expanded aria-controls')\n                        .find('.mln__toggle-indicator')\n                        .remove()\n                        .end()\n                        .appendTo($navEl.find('.mln__slide-over-controls'));\n                }\n\n                $navEl\n                    .find('.mln__back-btn')\n                    .first()\n                    .on('click', function(){\n                        $navEl\n                            .find('.mln__toggle-btn[aria-controls=\"' + currentMenuId + '\"], .mln__toggle-link[aria-controls=\"' + currentMenuId + '\"]')\n                            .trigger('click');\n                    });\n            });\n            \n            // Set dynamic height when mln events fire\n            $slideOverNav.on('show.mln.child', function() {\n                if ($slideOverNav.hasClass('mln--navbar-slide-over') && mlnViewport().width < mlnDataBreakpoint || mlnDataBreakpoint === undefined) {\n                    setDynamicHeight($slideOverNav);\n                }\n            }).on('hide.mln.child', function() {\n                if ($slideOverNav.hasClass('mln--navbar-slide-over') && mlnViewport().width < mlnDataBreakpoint || mlnDataBreakpoint === undefined) {\n                    setDynamicHeight($slideOverNav);\n                }\n            }).on('shown.mln.child', function(){\n                var latestNavShowing = $slideOverNav.find('.mln__has-child--showing')\n                    .last()\n                    .addClass('mln__has-child--active')\n                    .find('.mln__child__collapse')\n                    .first();\n                \n                slideOverKeyboardTrap(latestNavShowing);\n            });  \n            \n            // Remove dynamic height on navbar after resize\n            $(window).on('mlnResizeEnd', function () {\n                if ($slideOverNav.hasClass('mln--navbar-slide-over') && mlnViewport().width > mlnDataBreakpoint) {\n                    $slideOverNav.css('min-height', '');\n                } else {\n                    setDynamicHeight($slideOverNav);\n                }\n            });\n                                    \n            // Close all menus when closing off canvas\n            if (settings.offCanvasCloseAllMenus) {\n                $('.toggle-off-canvas').one('click', function() {\n                    var $toggleButton = $(this);\n                                    \n                    if ($toggleButton.attr('aria-expanded') === 'true') {\n                        $(document).on('hidden.offCanvas', function() {\n                            closeAllChildren();\n                        });\n                    }\n                });    \n            }\n            \n            setDynamicHeight($(this));\n        });\n    };\n}(jQuery));\n"],"file":"multilevel-nav-slide-over.js"}