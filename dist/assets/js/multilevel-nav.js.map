{"version":3,"names":[],"mappings":"","sources":["multilevel-nav.js"],"sourcesContent":["/*!\n  * Multilevel nav v3.4.1\n  */\n  \nvar mlnCurrent = 1;\n\n// Get browser width with or without scrollbar\nfunction mlnViewport() {\n    var view = window;\n    var viewString = 'inner';\n\n    if (!('innerWidth' in window)) {\n        viewString = 'client';\n        view = document.documentElement || document.body;\n    }\n\n    return {\n        width: view[viewString + 'Width'],\n        height: view[viewString + 'Height']\n    };\n}\n\n(function ($) {\n    'use strict';\n    \n    // Global plugin variables\n    var $document = $(document);\n    var $body = $('body');\n    var $window = $(window);\n    \n    // Resize delay\n    var windowWidth = $window.width();\n    $window.resize(function () {\n        var newWindowWidth = $window.width();\n\n        if (windowWidth !== newWindowWidth) {\n            if (this.resizeTO) {\n                clearTimeout(this.resizeTO);\n            }\n            this.resizeTO = setTimeout(function () {\n                $(this).trigger($.Event('mlnResizeEnd'));\n            }, 150);\n        }\n        windowWidth = newWindowWidth;\n    });\n      \n    $.fn.multilevelNav = function (options) {\n        $(this).each(function () {\n            var $mln = $(this);\n            var mlnParentList = $('.mln__list', $mln);\n            var mlnExpander = $('.mln__expander', $mln);\n            var mlnDataBreakpoint = $mln.attr('data-mln-breakpoint');\n            var mlnIsPageLoaded = false;\n            var mlnToggleBtnVerbiage = 'Toggle items under';\n            var mlnTransitionEnd = 'transitionend';\n            var settings;\n\n            // Setting defaults\n            settings = $.extend({\n                'hoverIntent': false,\n                'hoverIntentTimeout': 250,\n                'autoCloseNavbarMenus': true,\n                'autoDirection': true,\n                'toggleOnClickOnly': false,\n                'expandActiveItem': false,\n                'offCanvasScrollToActiveItem': false,\n                'wholeLinkToggler': false,\n                'topLevelWholeLinkToggler': false,\n                'navbarMenuBackdrop': false,\n                'navbarMegaMenuBackdrop': false,\n                'activeSelector': '.active',\n                'menuCloseOnInPageAnchorClick': false,\n                'expanderCloseOnInPageAnchorClick': false,\n                'autoCloseInactiveMenu': true,\n                'excludeLevel': '-1',\n                'childMenuTogglerSymbol': '<span class=\"mln__toggle-btn__chevron\"></span>',\n                'keepMenuOpenOnFocusOut': false\n            }, options);\n\n            // Show/hide menu(s)\n            function mlnToggleChild(el, action, animate) {\n                var collapseHeight = 0;\n                var mlnHasChild = el.closest('.mln__has-child');\n                var mlnChildToggler = mlnHasChild.find('.mln__toggle-btn, .mln__toggle-link').first();\n                var mlnToggleChildCollapse = mlnHasChild.find('> .mln__child__collapse').first();\n                var ariaExpandedValue;\n                var ariaHiddenValue;\n                var mlnAnyShowing;\n\n                // Figure out what aria values to use\n                if (action === 'show') {\n                    ariaExpandedValue = 'true';\n                    ariaHiddenValue = 'false';\n                } else if (action === 'hide' || action === undefined) {\n                    ariaExpandedValue = 'false';\n                    ariaHiddenValue = 'true';\n                }\n                \n                mlnHasChild.trigger($.Event('transition.mln.child'));\n\n                // Correct toggler attributes\n                mlnChildToggler.attr('aria-expanded', ariaExpandedValue);\n\n                // Grab height of inner collapse elements\n                collapseHeight = $('.mln__child__collapse__helper', mlnToggleChildCollapse).outerHeight();\n\n                // Show collapsible child elements\n                if (action === 'show') {\n                    mlnHasChild.addClass('mln__has-child--showing');\n\n                    mlnAnyShowing = $mln.find('.mln__has-child--showing');\n\n                    // Add class to body for regular menu backdrop\n                    if (\n                        mlnAnyShowing.length && $mln.hasClass('mln--navbar') &&\n                        settings.navbarMenuBackdrop === true\n                    ) {\n                        $body.addClass('js-mln-menu-showing');\n                    }\n\n                    // Add class to body for mega menu backdrop\n                    if (\n                        mlnHasChild.hasClass('mln__has-child--mega-menu') &&\n                        $mln.hasClass('mln--navbar') &&\n                        settings.navbarMegaMenuBackdrop === true\n                    ) {\n                        $body.addClass('js-mln-mega-menu-showing');\n                    }\n                    \n                    mlnHasChild.trigger($.Event('show.mln.child'));\n\n                    if (animate === true) {\n                        mlnToggleChildCollapse\n                            .addClass('mln__child--transitioning')\n                            .css('height', collapseHeight + 'px')\n                            .attr('aria-hidden', ariaHiddenValue)\n                            .one(mlnTransitionEnd, function () {\n                                mlnToggleChildCollapse\n                                    .css('height', 'auto')\n                                    .removeClass('mln__child--transitioning')\n                                    .css('height', '');\n                                \n                                if (mlnToggleChildCollapse.attr('aria-hidden') === 'false') {\n                                    mlnToggleChildCollapse.addClass('mln--height-auto');\n                                    mlnToggleChildCollapse.addClass('mln__child--overflow-visible');\n                                }\n                                \n                                mlnHasChild\n                                    .trigger($.Event('shown.mln.child'))\n                                    .trigger($.Event('transitioned.mln.child'));\n                            });\n                    } else {\n                        mlnToggleChildCollapse\n                            .css('height', 'auto')\n                            .addClass('mln--height-auto')\n                            .attr('aria-hidden', ariaHiddenValue)\n                            .css('height', '')\n                            .addClass('mln__child--overflow-visible');\n                            \n                        mlnHasChild\n                            .trigger($.Event('shown.mln.child'))\n                            .trigger($.Event('transitioned.mln.child'));\n                    }\n                }\n\n                // Hide collapsible child elements\n                if (action === 'hide') {\n                    mlnHasChild.removeClass('mln__has-child--showing');\n\n                    mlnAnyShowing = $('.mln--navbar').find('.mln__has-child--showing');\n\n                    if (\n                        !mlnAnyShowing.length &&\n                        $('.mln--navbar').length\n                    ) {\n                        $body.removeClass('js-mln-menu-showing');\n                    }\n\n                    if (\n                        mlnHasChild.hasClass('mln__has-child--mega-menu') &&\n                        !$('.mln__has-child--mega-menu').hasClass('mln__has-child--showing') &&\n                        $mln.hasClass('mln--navbar')\n                    ) {\n                        $body.removeClass('js-mln-mega-menu-showing');\n                    }\n                    \n                    mlnHasChild.trigger($.Event('hide.mln.child'));\n                    \n                    if (animate === true) {\n                        mlnToggleChildCollapse\n                            .css({\n                                'height': collapseHeight,\n                                'min-height': collapseHeight\n                            })\n                            .removeClass('mln__child--overflow-visible mln--height-auto')\n                            .attr('aria-hidden', ariaHiddenValue)\n                            .addClass('mln__child--transitioning');\n                        \n                        setTimeout(function(){\n                            mlnToggleChildCollapse.css({\n                                'height': '',\n                                'min-height': ''\n                            }).one(mlnTransitionEnd, function () {  \n                                mlnToggleChildCollapse.removeClass('mln__child--transitioning');                              \n                                mlnHasChild\n                                    .trigger($.Event('hidden.mln.child'))\n                                    .trigger($.Event('transitioned.mln.child'));\n                            }).children().on(mlnTransitionEnd, function () {\n                                return false;\n                            });\n                        }, 30);\n                    } else {\n                        mlnToggleChildCollapse\n                            .removeClass('mln__child--overflow-visible mln--height-auto')\n                            .attr('aria-hidden', ariaHiddenValue)\n                            .css('height', '');\n                        mlnHasChild\n                            .trigger($.Event('hidden.mln.child'))\n                            .trigger($.Event('transitioned.mln.child'));\n                    }\n                }\n            }\n\n            // Show/hide expander items\n            function mlnToggleExpander(animate) {\n                var collapseHeight = 0;\n                var collapseHelper = $('.mln__expander__helper', $mln);\n\n                if (animate !== false) {\n                    collapseHeight = collapseHelper.outerHeight();\n\n                    if (!mlnExpander.hasClass('mln__expander--showing')) {\n                        \n                        mlnExpander.trigger($.Event('showing.mln.expander'));\n                        \n                        mlnExpander\n                            .addClass('mln__expander--transitioning')\n                            .css('height', collapseHeight)\n                            .attr('aria-hidden', 'false')\n                            .parent()\n                            .find('.mln__expand-btn')\n                            .attr('aria-expanded', 'true');\n\n                        mlnExpander\n                            .one(mlnTransitionEnd, function () {\n                                $(this)\n                                    .css('height', 'auto')\n                                    .css('height', '')\n                                    .addClass('mln__expander--showing')\n                                    .removeClass('mln__expander--transitioning');\n                                mlnExpander.trigger($.Event('shown.mln.expander'));\n                            }).children().on(mlnTransitionEnd, function () {\n                                return false;\n                            });\n                    } else {\n                        mlnExpander.trigger($.Event('hiding.mln.expander'));\n                        mlnExpander\n                            .addClass('mln__expander--transitioning')\n                            .css('height', collapseHeight)\n                            .attr('aria-hidden', 'true')\n                            .parent()\n                            .find('.mln__expand-btn')\n                            .attr('aria-expanded', 'false');\n\n                        setTimeout(function () {\n                            mlnExpander\n                                .removeClass('mln__expander--showing')\n                                .css('height', '');\n                        }, 10);\n\n                        mlnExpander\n                            .one(mlnTransitionEnd, function () {\n                                $(this).removeClass('mln__expander--transitioning');\n                                mlnExpander.trigger($.Event('hidden.mln.expander'));\n                            }).children().on(mlnTransitionEnd, function () {\n                                return false;\n                            });\n                    }\n                }\n\n                // Adjust attributes without animating the expander menu\n                if (animate === false && $mln.closest('.mln--navbar').length) {\n                    if (mlnViewport().width < mlnDataBreakpoint) {\n                        mlnExpander\n                            .removeClass('mln__expander--showing')\n                            .attr('aria-hidden', 'true')\n                            .parent().find('.mln__expand-btn')\n                            .attr('aria-expanded', 'false');\n                    } else {\n                        mlnExpander\n                            .attr('aria-hidden', 'false')\n                            .parent().find('.mln__expand-btn')\n                            .attr('aria-expanded', 'true');\n                    }\n                }\n\n                if (animate === false && $mln.hasClass('mln--expand-above-breakpoint')) {\n                    if (mlnViewport().width < mlnDataBreakpoint) {\n                        mlnExpander\n                            .removeClass('mln__expander--showing')\n                            .attr('aria-hidden', 'true')\n                            .parent().find('.mln__expand-btn')\n                            .attr('aria-expanded', 'false');\n                    } else {\n                        mlnExpander\n                            .addClass('mln__expander--showing')\n                            .attr('aria-hidden', 'false')\n                            .parent().find('.mln__expand-btn')\n                            .attr('aria-expanded', 'true');\n                    }\n                }\n            }\n\n            // Assign class to child items that run off the edge of the screen\n            function assignFlowDirection() {\n                if (settings.autoDirection === true) {\n                    setTimeout(function () {\n                        hasChild.each(function () {\n                            var $hasChild = $(this);\n                            var mlnToggleChildOffset = ($hasChild.offset().left - $body.offset().left) + ($hasChild.outerWidth() * 2);\n\n                            if (mlnToggleChildOffset > mlnViewport().width && mlnViewport().width >= mlnDataBreakpoint) {\n                                $hasChild.addClass('mln__child--flow-right');\n                            } else {\n                                $hasChild.removeClass('mln__child--flow-right');\n                            }\n                        });\n                    }, 300);\n                }\n            }\n\n            // Keep items and parents with active class expanded on load\n            function expandActiveItem() {\n                if (settings.expandActiveItem === true) {\n                    var activeSelector = settings.activeSelector;\n\n                    $(activeSelector, mlnParentList).each(function () {\n                        var $activeItem = $(this);\n\n                        $activeItem\n                            .addClass('mln__has-child--expand-on-load')\n                            .parents('.mln__has-child')\n                            .last()\n                            .addClass('mln__has-child--expand-on-load')\n                            .end()\n                            .parents('.mln__has-child.mln__has-child')\n                            .addClass('mln__has-child--expand-on-load');\n                    });\n\n                    $('.mln__has-child--expand-on-load', mlnParentList).each(function () {\n                        if (\n                            !mlnIsPageLoaded || mlnParentList.closest($mln).hasClass('mln--navbar') &&\n                            mlnViewport().width < mlnDataBreakpoint &&\n                            !mlnIsPageLoaded\n                        ) {\n                            mlnToggleChild($(this), 'show', false);\n                        }\n\n                        if (\n                            mlnParentList.closest($mln).hasClass('mln--navbar') &&\n                            mlnViewport().width >= mlnDataBreakpoint\n                        ) {\n                            mlnToggleChild($(this), 'hide',  false);\n                        }\n                    });\n                    \n                    if (settings.offCanvasScrollToActiveItem === true) {\n                        var lastActiveItem = $mln.find(settings.activeSelector).last();\n                        if (lastActiveItem.length) {\n                            var scrollToLoc = lastActiveItem.position().top;\n                                                                    \n                            $('#offCanvasArea').animate({\n                                scrollTop: scrollToLoc\n                            }, 1);\n                        }\n                        setTimeout(function(){\n                            $body.addClass('js-off-canvas-scrolled');\n                        }, 2);\n                    }\n\n                    mlnIsPageLoaded = true;\n                }\n            }\n\n            // Start modifying the DOM\n            if (mlnParentList.length) {\n\n                // Add helper div inside expander\n                mlnExpander.wrapInner('<div class=\"mln__expander__helper\"></div>');\n\n                // Open/close menu expander\n                var expanderButton = $('.mln__expand-btn', $mln);\n                expanderButton.on('click', function () {\n                    mlnToggleExpander();\n                });\n\n                // Add depth class to nested list items\n                var nestedLi = $('li:not(.mln__child__mega-menu li)', mlnParentList);\n                nestedLi.each(function () {\n                    var $li = $(this);\n                    var levelClass = 'mln__level-' + ($li.parents('li').length + 1);\n\n                    $li.addClass(levelClass);\n                });\n\n                // Find and modify mega menus\n                mlnParentList\n                    .find('.mln__child__mega-menu')\n                    .wrap('<div class=\"mln__child__collapse\" tabindex=\"-1\"></div>')\n                    .wrap('<div class=\"mln__child__collapse__helper\"></div>')\n                    .closest('li')\n                    .addClass('mln__has-child');\n\n                // Add mega menu backdrop\n                if (settings.navbarMegaMenuBackdrop === true && !$('.mln-backdrop').length) {\n                    $body.append('<div class=\"mln-backdrop\"></div>');\n                }\n\n                // Find and modify child lists\n                mlnParentList\n                    .find('ul')\n                    .not('.mln__level-' + settings.excludeLevel +' > ul')\n                    .not('.mln__level-' + settings.excludeLevel +' > ul ul')\n                    .each(function () {\n                        var $parentList = $(this);\n\n                        if ($parentList.siblings('.mln__child__collapse').length) {\n                            var parentCollapse = $parentList.parent()\n                                .find('.mln__child__collapse__helper');\n\n                            $parentList\n                                .addClass('mln__child__list')\n                                .prependTo(parentCollapse);\n\n                        } else if (!$parentList.closest('.mln__child__mega-menu').length) {\n                            $parentList\n                                .addClass('mln__child__list')\n                                .wrap('<div class=\"mln__child__collapse\" tabindex=\"-1\"></div>')\n                                .wrap('<div class=\"mln__child__collapse__helper\"></div>')\n                                .closest('li')\n                                .addClass('mln__has-child');\n                        }\n                    });\n\n                // Add mega menu modifier class to top level\n                var megaMenu = $('.mln__child__mega-menu', mlnParentList);\n                megaMenu.each(function () {\n                    $(this)\n                        .closest('li')\n                        .addClass('mln__has-child--mega-menu');\n                });\n\n                // Wrap the parent <a> tag in it's own div\n                var hasChild = $('.mln__has-child', mlnParentList);\n                hasChild.each(function () {\n                    $(this)\n                        .find('> a')\n                        .wrap('<div class=\"mln__child-controls\"></div>');\n                });\n\n                // Add a toggle button to list items with children\n                var childNav = $('.mln__child-controls', mlnParentList);\n                childNav.each(function () {\n                    var $childNav = $(this);\n                    var linkText= $childNav.find('> a').text();\n                    var ariaLabelValue = mlnToggleBtnVerbiage + ' ' + linkText;\n\n                    $('<button></button>')\n                        .addClass('mln__toggle-btn')\n                        .attr('type', 'button')\n                        .attr('aria-label', ariaLabelValue)\n                        .html(settings.childMenuTogglerSymbol)\n                        .appendTo($childNav);\n                });\n\n                // Assign IDs and attributes to child menu elements\n                var childCollapse = $('.mln__child__collapse', mlnParentList);\n                childCollapse.each(function (index) {\n                    var $childCollapseId = 'mln' + mlnCurrent + 'ChildCollapse' + (index + 1);\n\n                    $(this)\n                        .attr('aria-hidden', 'true')\n                        .attr('data-mln-active-status', 'off')\n                        .attr('id', $childCollapseId)\n                        .parent()\n                        .find('.mln__toggle-btn')\n                        .attr('aria-expanded', 'false')\n                        .attr('aria-controls', $childCollapseId);\n                });\n\n                // Assign IDs and aria attributes to expander elements\n                mlnExpander.each(function (index) {\n                    var $mlnExpanderId = 'mln' + mlnCurrent + 'Expander' + (index + 1);\n\n                    $(this)\n                        .attr('aria-hidden', 'true')\n                        .attr('id', $mlnExpanderId)\n                        .parent()\n                        .find('.mln__expand-btn')\n                        .attr('aria-expanded', 'false')\n                        .attr('aria-controls', $mlnExpanderId);\n                });\n\n                // Close main nav child menu if in page anchor is clicked\n                if (settings.menuCloseOnInPageAnchorClick === true) {\n                    $('a', $mln).each(function () {\n                        var $anchor = $(this);\n                        var firstChar = $anchor.attr('href').charAt(0);\n                        var pageAnchor = ((firstChar === '#') ? true : false);\n\n                        $anchor.on('click', function (e) {\n                            if (\n                                pageAnchor &&\n                                !$(e.target).closest('.mln__toggle-link').length &&\n                                mlnViewport().width >= mlnDataBreakpoint\n                            ) {\n                                mlnToggleChild($('.mln__has-child--showing', $mln), 'hide', true);\n                            }\n                        });\n                    });\n                }\n\n                // Close expander if in page anchor is clicked\n                if (settings.expanderCloseOnInPageAnchorClick === true) {\n                    $('a', $mln).each(function () {\n                        var $anchor = $(this);\n                        var firstChar = $anchor.attr('href').charAt(0);\n                        var pageAnchor = ((firstChar === '#') ? true : false);\n\n                        $anchor.on('click', function (e) {\n                            if (\n                                pageAnchor &&\n                                !$(e.target).closest('.mln__toggle-link').length\n                            ) {\n                                mlnToggleExpander('hide');\n                            }\n                        });\n                    });\n                }\n\n                // Whole link click expand and/or top level whole link expand\n                if (\n                    settings.wholeLinkToggler === true ||\n                    settings.topLevelWholeLinkToggler === true\n                ) {\n                    var wholeElement;\n\n                    if (settings.wholeLinkToggler === true) {\n                        wholeElement = $('.mln__child-controls > a', mlnParentList);\n\n                        $(mlnParentList)\n                            .closest($mln)\n                            .addClass('mln--whole-link-expand');\n                    }\n\n                    if (settings.topLevelWholeLinkToggler === true) {\n                        wholeElement = $('> .mln__has-child', mlnParentList).find('> .mln__child-controls > a') || $('> .mln__has-child', mlnParentList)\n                            .siblings('.mln__has-child')\n                            .find('> .mln__child-controls > a');\n\n                        $(mlnParentList)\n                            .closest($mln)\n                            .removeClass('mln--whole-link-expand')\n                            .addClass('mln--top-level-whole-link-expand');\n                    }\n\n                    wholeElement.each(function () {\n                        var $wholeElement = $(this);\n                        var closestToggleBtn = $wholeElement.closest('.mln__has-child')\n                            .find('.mln__toggle-btn')\n                            .first();\n                        \n                        var ariaExpandedValue = closestToggleBtn.attr('aria-expanded');\n                        var ariaControlsValue = closestToggleBtn.attr('aria-controls');\n\n                        $('<span></span>')\n                            .addClass('mln__toggle-indicator')\n                            .html(settings.childMenuTogglerSymbol)\n                            .appendTo($wholeElement);\n\n                        $wholeElement\n                            .addClass('mln__toggle-link')\n                            .attr('role', 'button')\n                            .attr('aria-expanded', ariaExpandedValue)\n                            .attr('aria-controls', ariaControlsValue)\n                            .on('click', function (e) {\n                                $wholeElement.focus();\n                                e.preventDefault();\n                            });\n\n                        closestToggleBtn.remove();\n                    });\n                }\n\n                // Toggle-button click\n                var toggleButton = $('.mln__toggle-btn, .mln__toggle-link', mlnParentList);\n                var touchDrag = false;\n\n                // Checking touchmove/touchend and applying a hack to get the\n                // toggle button to work on first click for iOS\n                toggleButton.on('touchmove', function () {\n                    touchDrag = true;\n                }).on('touchend click', function (e) {\n\n                    // Prevent first click focus on iOS\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    var $toggleButton = $(this);\n                    var hasChildParent = $toggleButton.closest('.mln__has-child');\n                    var associatedMenu = $toggleButton.closest(hasChildParent)\n                            .find('.mln__child__collapse')\n                            .first();\n                    var hasChildSiblings = hasChildParent.parent()\n                            .find('.mln__has-child--showing')\n                            .not(hasChildParent);\n\n                    if (\n                        e.type === 'click' ||\n                        e.type === 'touchend' &&\n                        !touchDrag &&\n                        !$mln.find('.mln__has-child--showing.mln__child--transitioning').length\n                    ) {\n                        if (\n                            mlnViewport().width >= mlnDataBreakpoint &&\n                            settings.autoCloseNavbarMenus === true &&\n                            !$toggleButton.closest($mln).hasClass('mln--expand-above-breakpoint') &&\n                            $toggleButton.closest($mln).hasClass('mln--navbar')\n                        ) {\n                            associatedMenu.attr('data-mln-active-status', 'off');\n                            mlnToggleChild(hasChildSiblings, 'hide', true);\n                        }\n\n                        if ($toggleButton.closest('.mln__has-child').hasClass('mln__has-child--showing')) {\n                            mlnToggleChild($toggleButton, 'hide', true);\n                            associatedMenu.attr('data-mln-active-status', 'off');\n                        } else {\n                            mlnToggleChild($toggleButton, 'show', true);\n                            associatedMenu.attr('data-mln-active-status', 'on');\n                        }\n                    }\n\n                    touchDrag = false;\n                });\n\n                // Show/hide child menus with hoverIntent or just regular hover\n                if (\n                    settings.hoverIntent === true &&\n                    settings.toggleOnClickOnly === false\n                ) {\n                    hasChild.each(function () {\n                        var $hasChild = $(this);\n                        var associatedMenu = $hasChild.find('.mln__child__collapse').first();\n\n                        $hasChild.hoverIntent({\n                            over: function () {\n                                associatedMenu.attr('data-mln-active-status', 'on');\n                                if (\n                                    mlnViewport().width >= mlnDataBreakpoint &&\n                                    $hasChild.closest('.mln--navbar').length\n                                ) {\n                                    mlnToggleChild($hasChild, 'show', true);\n                                }\n                            },\n                            timeout: settings.hoverIntentTimeout,\n                            out: function () {\n                                associatedMenu.attr('data-mln-active-status', 'off');\n                                if (\n                                    mlnViewport().width >= mlnDataBreakpoint &&\n                                    associatedMenu.attr('aria-hidden') === 'false' &&\n                                    $hasChild.closest('.mln--navbar').length\n                                ) {\n                                    mlnToggleChild($hasChild, 'hide', true);\n                                }\n                            },\n                            delay: settings.hoverIntentTimeout\n                        });\n                    });\n                } else if (settings.toggleOnClickOnly === false) {\n                    hasChild.each(function () {\n                        var $hasChild = $(this);\n                        var associatedMenu = $hasChild.find('.mln__child__collapse').first();\n\n                        $hasChild.hover(function () {\n                            if (\n                                mlnViewport().width >= mlnDataBreakpoint &&\n                                $hasChild.closest('.mln--navbar').length\n                            ) {\n                                if ($(this).closest('.mln__has-child').hasClass('mln__has-child--showing')) {\n                                    associatedMenu.attr('data-mln-active-status', 'off');\n                                    mlnToggleChild($(this), 'hide', true);\n                                } else {\n                                    associatedMenu.attr('data-mln-active-status', 'on');\n                                    mlnToggleChild($(this), 'show', true);\n                                }\n                            }\n                        });\n                    });\n                }\n\n                // Keyboarding\n                mlnParentList.each(function () {\n                    var $mlnParentList = $(this);\n                    var isCurrentMenuFocused;\n                    var isCurrentMlnList;\n\n                    $mlnParentList.on('keydown', function (e) {\n                        var pressedKeyCode = e.keyCode;\n                        var eTarget = $(e.target);\n\n                        // Escape key pressed\n                        if (pressedKeyCode === 27) {\n                            var associatedMenu = eTarget.closest('.mln__has-child--showing');\n\n                            // Set focus on parent toggle button\n                            if (associatedMenu.length) {\n                                associatedMenu\n                                    .closest('.mln__has-child')\n                                    .find('.mln__toggle-btn, .mln__toggle-link')\n                                    .get(0)\n                                    .focus();\n\n                                // Hide associated or closest parent menu\n                                mlnToggleChild(associatedMenu, 'hide', true);\n                            }\n                        }\n\n                        // Prevent tabbing into closing menu\n                        if (\n                            pressedKeyCode === 9 &&\n                            eTarget.attr('aria-expanded') ==='false' &&\n                            eTarget.parent().siblings('.mln__child__collapse').hasClass('mln__child--transitioning')\n                        ) {\n                            var nextFocusableAnchor = eTarget.closest('.mln__has-child').next().find('a').first();\n                                                        \n                            if (!nextFocusableAnchor.length) {\n                                nextFocusableAnchor = eTarget.closest('.mln__level-1').next().find('a').first();\n                                $('.mln__has-child--showing', $mln).each(function(){\n                                    mlnToggleChild($(this), 'hide', true);\n                                });\n                            }\n                            e.preventDefault();\n                            nextFocusableAnchor.focus();\n                        }\n                    });\n\n                    // Close inactive menus when tabbing out of them\n                    $mlnParentList.on('keyup', function(e){\n                        var eTarget = $(e.target);\n                        \n                        if (\n                            !eTarget.closest('.mln__has-child--showing').length &&\n                            mlnViewport().width >= mlnDataBreakpoint &&\n                            settings.autoCloseInactiveMenu === true &&\n                            eTarget.closest('.mln--navbar').length\n                        ) {                            \n                            $('.mln__has-child--showing', $mln).each(function(){\n                                mlnToggleChild($(this), 'hide', true);\n                            });\n                        }\n                    });\n\n                    // Close any menu when leaving currently focused menu parent\n                    if (!settings.keepMenuOpenOnFocusOut) {\n                        $mlnParentList.on('focusout', function (e) {\n                            setTimeout(function () {\n                                if (mlnViewport().width >= mlnDataBreakpoint) {\n                                    var nonActiveMenus = $('.mln--navbar:not(:has(:focus))');\n                                    $('.mln__has-child--showing', nonActiveMenus ).each(function(){\n                                        mlnToggleChild($(this), 'hide', true);\n                                    });\n                                }\n    \n                                isCurrentMenuFocused = ( $(document.activeElement).closest('.mln--navbar').length && $(document.activeElement).closest('.mln__list').length ) ? true : false;\n                                \n                                if (\n                                    isCurrentMenuFocused === false &&\n                                    mlnViewport().width >= mlnDataBreakpoint &&\n                                    e.type !== 'keydown' &&\n                                    settings.autoCloseNavbarMenus === true &&\n                                    $(e.target).closest('.mln--navbar').length &&\n                                    !$(e.target).closest('.mln__has-child--showing').length\n                                ) {\n                                    mlnToggleChild($('.mln__has-child--showing', $mln), 'hide', true);\n                                }\n                            }, 150);\n                        });\n                    }\n                });\n                \n                // Add special class to the current showing menu\n                $mln.on('transition.mln.child', function() {\n                    $mln\n                        .find('.mln__visible-menu')\n                        .removeClass('mln__visible-menu');\n                }).on('hide.mln.child show.mln.child initialized.mln', function() {\n                    if (!$mln.find('.mln__has-child--showing').length) {\n                        $mln\n                            .find('.mln__list')\n                            .addClass('mln__visible-menu');\n                    } else {\n                        $mln.find('.mln__has-child--showing')\n                            .last()\n                            .addClass('mln__visible-menu');                        \n                    }\n                });\n\n\n                // Resizer\n                $window.on('mlnResizeEnd', function () {\n                    if (\n                        mlnViewport().width >= mlnDataBreakpoint &&\n                        settings.autoCloseNavbarMenus === true &&\n                        settings.expandActiveItem === false\n                    ) {\n                        mlnToggleChild($('.mln__has-child--showing', $mln), 'hide', false);\n                        mlnExpander\n                            .css('height', '')\n                            .removeClass('mln__expander--showing');\n                    }\n\n                    // Run functions after resize\n                    expandActiveItem();\n                    mlnToggleExpander(false);\n                    assignFlowDirection();\n                });\n\n                // Run functions on load\n                expandActiveItem();\n                mlnToggleExpander(false);\n                assignFlowDirection();\n                \n                // Add loaded class\n                $mln.addClass('mln--js-loaded');\n            }\n            $mln.trigger($.Event('initialized.mln'));\n            mlnCurrent++;\n        });\n    };\n}(jQuery));"],"file":"multilevel-nav.js"}